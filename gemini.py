#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Gemini Analyzer Module

This module handles sending images to the Google Gemini API
for analysis using a multimodal model.
"""

import os
import google.generativeai as genai
from PIL import Image
import io
from dotenv import load_dotenv
load_dotenv()
# --- Configuration ---
# It's highly recommended to load the API key from an environment variable
# or a secure configuration file, NOT hardcoded here.
API_KEY = os.getenv("GEMINI_API_KEY")

# --- Module State ---
is_configured = False

def configure_gemini():
    """
    Configures the Gemini API using the API key from environment variables.
    Returns True if successful, False otherwise.
    """
    global is_configured
    if is_configured:
        return True

    if not API_KEY:
        print("ERROR: GEMINI_API_KEY environment variable not set.")
        print("       Please set the environment variable with your API key.")
        return False

    try:
        genai.configure(api_key=API_KEY)
        is_configured = True
        print("INFO: Gemini API configured successfully.")
        return True
    except Exception as e:
        print(f"ERROR: Failed to configure Gemini API: {e}")
        is_configured = False
        return False

def analyze_image_with_gemini(pil_image, prompt="Describe in detail what is visible on this screen, including text, icons, and window layout."):
    """
    Sends a PIL image to the configured Gemini multimodal model and returns the description.

    Args:
        pil_image (PIL.Image.Image): The image captured from the screen.
        prompt (str): The prompt to guide the Gemini model's analysis.

    Returns:
        str: The text description generated by Gemini, or an error message.
    """
    global is_configured
    if not is_configured:
        # Attempt to configure if not already done
        if not configure_gemini():
            return "Error: Gemini API not configured. Check API key setup."

    try:
        # Select the multimodal model
        # Use gemini-1.5-flash-latest or gemini-1.5-pro-latest if available and preferred
        model = genai.GenerativeModel('gemini-2.0-flash')

        # Generate content using the prompt and the image
        # The google-generativeai library >= 0.3.0 supports passing PIL Images directly
        response = model.generate_content([prompt, pil_image])

        # Basic check for response content vs. safety blocks/errors
        if response.parts:
             # Make sure to access the text part correctly
             if hasattr(response, 'text'):
                return response.text
             else:
                 # Handle cases where the structure might differ slightly or lack a direct .text attribute
                 # This might involve inspecting response.parts if .text isn't available
                 try:
                     return "".join(part.text for part in response.parts if hasattr(part, 'text'))
                 except Exception as e:
                     print(f"WARN: Could not extract text from Gemini response parts: {e}")
                     return "[Gemini response format unexpected]"

        else:
            # Handle cases where the response might be empty or blocked due to safety settings
            feedback = response.prompt_feedback
            block_reason = feedback.block_reason if hasattr(feedback, 'block_reason') else 'Unknown'
            print(f"WARN: Gemini response empty or blocked. Reason: {block_reason}")
            # You might want to inspect response.candidates for more details if available
            return f"[Gemini response empty/blocked: {block_reason}]"

    except Exception as e:
        # Catch potential API errors, network issues, etc.
        print(f"ERROR: Exception calling Gemini API: {e}")
        # Check if the error message provides specific feedback (e.g., invalid API key)
        error_message = str(e)
        if "API key not valid" in error_message:
             is_configured = False # Reset configuration status on API key error
             return "Error: Invalid Gemini API Key."
        return f"Error during Gemini analysis: {error_message}"

if __name__ == '__main__':
    # Example usage if run directly (requires a sample image named 'test_screen.png')
    print("Testing Gemini Analyzer Module...")
    if configure_gemini():
        try:
            # Load a test image (replace 'test_screen.png' with an actual image file)
            test_image = Image.open("test_screen.png")
            description = analyze_image_with_gemini(test_image)
            print("\n--- Gemini Analysis ---")
            print(description)
            print("-----------------------\n")
        except FileNotFoundError:
            print("ERROR: Test image 'test_screen.png' not found. Cannot run direct test.")
        except Exception as e:
            print(f"An error occurred during the test: {e}")
    else:
        print("Cannot run test because Gemini API configuration failed.")

